|| ?module? assignment9


assignment9.emptyState = Data.Map.newMap
assignment9.anon_39 a_0 s_1 = _Tuple2 a_0 s_1
assignment9.pure_48 a_0 = assignment9.Sem (assignment9.anon_39 a_0)
assignment9.integer i_0::I = assignment9.pure_48 i_0
assignment9.new = assignment9.pure_48 _predefined._Nil
assignment9.toList i_0::I = _predefined._Cons i_0 _predefined._Nil
assignment9.anon_38 f_0 !s_1 x_2 = <{assignment9._c;72;32_798}> (s_1 x_2) f_0
<{assignment9._c;72;32_798}> !_x_0 f_1 = case _x_0 (_Tuple2 a_1_0 s2_1_1 -> _Tuple2 (f_1 a_1_0) s2_1_1) 
assignment9.fmap_46 f_0 !_x_1 = case _x_1 (assignment9.Sem s_1_0 -> assignment9.Sem (assignment9.anon_38 f_0 s_1_0)) 
assignment9.anon_40 !x_0 !f_1 s_2 = <{assignment9._c;76;38_800}> (f_1 s_2) x_0
<{assignment9._c;76;38_800}> !_x_0 !x_1 = case _x_0 (_Tuple2 f1_1_0 xs_1_1 -> <{assignment9._c;77;44_799}> (x_1 xs_1_1) f1_1_0) 
<{assignment9._c;77;44_799}> !_x_0 f1_1 = case _x_0 (_Tuple2 x1_1_0 xss_1_1 -> _Tuple2 (f1_1 x1_1_0) xss_1_1) 
<{assignment9.<*>_47}> !_x_0 !_x_1 = case _x_0 (assignment9.Sem f_1_0 -> case _x_1 (assignment9.Sem x_2_0 -> assignment9.Sem (assignment9.anon_40 x_2_0 f_1_0)) ) 
assignment9.insert !e_0 !s_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 <{StdList.++}>) s_1) (assignment9.fmap_46 assignment9.toList e_0)
assignment9.delete !e_0 !s_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 StdList.removeMember_57) e_0) s_1
assignment9.union !s1_0 !s2_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 (Data.List.union (<{StdOverloaded.==;}> <{StdInt.==_16}>))) s1_0) s2_1
assignment9.intersect !s1_0 !s2_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 (Data.List.intersect (<{StdOverloaded.==;}> <{StdInt.==_16}>))) s1_0) s2_1
assignment9.difference !s1_0 !s2_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 (Data.List.difference (<{StdOverloaded.==;}> <{StdInt.==_16}>))) s1_0) s2_1
assignment9.size !s_0 = assignment9.fmap_46 StdList.length_47 s_0
assignment9.unS !_x_0 = case _x_0 (assignment9.Sem f_1_0 -> f_1_0) 
assignment9.eval !e_0 = assignment9.unS e_0 assignment9.emptyState
<{assignment9.:.}> a_0 b_1 = <{Control.Applicative.*>}> (<{Control.Applicative.Applicative;}> <{assignment9.<*>_47}> assignment9.pure_48 (<{Data.Functor.Functor;}> assignment9.fmap_46)) a_0 b_1
<{assignment9.==.}> !<{_v==_0}> !_vApplicative_1 a_2 b_3 = select _vApplicative_1::<{Control.Applicative.Applicative;}> 0 (select _vApplicative_1::<{Control.Applicative.Applicative;}> 0 (select _vApplicative_1::<{Control.Applicative.Applicative;}> 1 (select <{_v==_0}>::<{StdOverloaded.==;}> 0)) a_2) b_3
<{assignment9.<.}> !<{_v<_0}> !_vApplicative_1 a_2 b_3 = select _vApplicative_1::<{Control.Applicative.Applicative;}> 0 (select _vApplicative_1::<{Control.Applicative.Applicative;}> 0 (select _vApplicative_1::<{Control.Applicative.Applicative;}> 1 (select <{_v<_0}>::<{StdOverloaded.<;}> 0)) a_2) b_3
assignment9.anon_32 stat1_0 stat2_1 !cond_2 s_3 = <{assignment9._c;116;61_801}> (cond_2 s_3) stat1_0 stat2_1
<{assignment9._c;116;61_801}> !_x_0 stat1_1 stat2_2 = case _x_0 (_Tuple2 _x_1_0 s2_1_1 -> case _x_1_0 (True -> stat1_1 s2_1_1) (False -> stat2_2 s2_1_1) ) 
assignment9.IF !_x_0 !_x_1 !_x_2 !_x_3 !_x_4 = case _x_0 (assignment9.Sem cond_1_0 -> case _x_1 (assignment9.THEN -> case _x_2 (assignment9.Sem stat1_3_0 -> case _x_3 (assignment9.ELSE -> case _x_4 (assignment9.Sem stat2_5_0 -> assignment9.Sem (assignment9.anon_32 stat1_3_0 stat2_5_0 cond_1_0)) ) ) ) ) 
assignment9.anon_33 a_0 !cond_1 s_2 = <{assignment9._c;122;41_804}> (cond_1 s_2) a_0 cond_1
assignment9.WHILE !_x_0 !_x_1 !_x_2 = case _x_0 (assignment9.Sem cond_1_0 -> case _x_1 (assignment9.DO -> case _x_2 (assignment9.Sem a_3_0 -> assignment9.Sem (assignment9.anon_33 a_3_0 cond_1_0)) ) ) 
<{assignment9._c;122;41_804}> !_x_0 a_1 cond_2 = case _x_0 (_Tuple2 _x_1_0 s2_1_1 -> case _x_1_0 (True -> <{assignment9._c;124;58_803}> (a_1 s2_1_1) cond_2 a_1) (False -> _Tuple2 _predefined._Unit s2_1_1) ) 
<{assignment9._c;124;58_803}> !_x_0 !cond_1 a_2 = case _x_0 (_Tuple2 a2_1_0 s3_1_1 -> <{assignment9._c;125;68_802}> (assignment9.unS (assignment9.WHILE (assignment9.Sem cond_1) assignment9.DO (assignment9.Sem a_2)) s3_1_1)) 
<{assignment9._c;125;68_802}> !_x_0 = case _x_0 (_Tuple2 a3_1_0 s4_1_1 -> _Tuple2 _predefined._Unit s4_1_1) 
assignment9.x = "x"
assignment9.y = "y"
assignment9.z = "z"
assignment9.expr1 = assignment9.integer 2
<{assignment9.+_50}> !x_0 !y_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 <{StdInt.+_6}>) x_0) y_1
assignment9.expr2 = <{assignment9.+_50}> assignment9.expr1 assignment9.expr1
<{assignment9.*_52}> !x_0 !y_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 <{StdInt.*_9}>) x_0) y_1
assignment9.expr3 = <{assignment9.+_50}> assignment9.expr1 (<{assignment9.*_52}> assignment9.expr1 (assignment9.integer 3))
assignment9.expr4 = assignment9.insert assignment9.expr3 assignment9.new
assignment9.anon_35 !<{_v<_0}> var_1 !f_2 s_3 = <{assignment9._c;55;34_805}> (f_2 s_3) <{_v<_0}> var_1
<{assignment9._c;55;34_805}> !_x_0 <{_v<_1}> var_2 = case _x_0 (_Tuple2 ints_1_0 s2_1_1 -> _Tuple2 ints_1_0 (Data.Map.put <{_v<_1}> var_2 (assignment9.S ints_1_0) s2_1_1)) 
assignment9.anon_788 var_0 !f_1 s_2 = <{assignment9._c;55;34_806}> (f_1 s_2) var_0
<{assignment9._c;55;34_806}> !_x_0 var_1 = case _x_0 (_Tuple2 ints_1_0 s2_1_1 -> _Tuple2 ints_1_0 (Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) var_1 (assignment9.S ints_1_0) s2_1_1)) 
<{assignment9.=._43}> var_0 !_x_1 = case _x_1 (assignment9.Sem f_1_0 -> assignment9.Sem (assignment9.anon_788 var_0 f_1_0)) 
<{assignment9.get`_68}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{assignment9.get`_68}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{assignment9.get`_68}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
assignment9.anon_37 !<{_v<_0}> str_1 s_2 = _Tuple2 (<{assignment9._c;63;31_807}> (<{assignment9.get`_68}> <{_v<_0}> str_1 s_2)) s_2
<{assignment9._c;63;31_807}> !_x_0 = case _x_0 (Data.Maybe.Just _x_1_0 -> case _x_1_0 (assignment9.S is_2_0 -> is_2_0) ) 
<{assignment9.get`_790}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{assignment9.get`_790}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{assignment9.get`_790}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
assignment9.anon_789 str_0 s_1 = _Tuple2 (<{assignment9._c;63;31_808}> (<{assignment9.get`_790}> str_0 s_1)) s_1
<{assignment9._c;63;31_808}> !_x_0 = case _x_0 (Data.Maybe.Just _x_1_0 -> case _x_1_0 (assignment9.S is_2_0 -> is_2_0) ) 
assignment9.variable_45 str_0 = assignment9.Sem (assignment9.anon_789 str_0)
assignment9.expr5 = <{assignment9.:.}> (<{assignment9.=._43}> assignment9.x assignment9.expr4) (assignment9.variable_45 assignment9.x)
assignment9.anon_34 !<{_v<_0}> var_1 !f_2 s_3 = <{assignment9._c;52;34_809}> (f_2 s_3) <{_v<_0}> var_1
<{assignment9._c;52;34_809}> !_x_0 <{_v<_1}> var_2 = case _x_0 (_Tuple2 int1_1_0 s2_1_1 -> _Tuple2 int1_1_0 (Data.Map.put <{_v<_1}> var_2 (assignment9.I int1_1_0) s2_1_1)) 
assignment9.anon_791 var_0 !f_1 s_2 = <{assignment9._c;52;34_810}> (f_1 s_2) var_0
<{assignment9._c;52;34_810}> !_x_0 var_1 = case _x_0 (_Tuple2 int1_1_0 s2_1_1 -> _Tuple2 int1_1_0 (Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) var_1 (assignment9.I int1_1_0) s2_1_1)) 
<{assignment9.=._42}> var_0 !_x_1 = case _x_1 (assignment9.Sem f_1_0 -> assignment9.Sem (assignment9.anon_791 var_0 f_1_0)) 
<{assignment9.get`_67}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{assignment9.get`_67}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{assignment9.get`_67}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
assignment9.anon_36 !<{_v<_0}> str_1 s_2 = _Tuple2 (<{assignment9._c;60;31_811}> (<{assignment9.get`_67}> <{_v<_0}> str_1 s_2)) s_2
<{assignment9._c;60;31_811}>::I !_x_0 = case _x_0 (Data.Maybe.Just _x_1_0 -> case _x_1_0 (assignment9.I i_2_0 -> i_2_0) ) 
<{assignment9.get`_793}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{assignment9.get`_793}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{assignment9.get`_793}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
assignment9.anon_792 str_0 s_1 = _Tuple2 (<{assignment9._c;60;31_812}> (<{assignment9.get`_793}> str_0 s_1)) s_1
<{assignment9._c;60;31_812}>::I !_x_0 = case _x_0 (Data.Maybe.Just _x_1_0 -> case _x_1_0 (assignment9.I i_2_0 -> i_2_0) ) 
assignment9.variable_44 str_0 = assignment9.Sem (assignment9.anon_792 str_0)
assignment9.expr6 = <{assignment9.:.}> (<{assignment9.:.}> (<{assignment9.=._43}> assignment9.x (assignment9.insert (assignment9.integer 11) assignment9.new)) (<{assignment9.=._42}> assignment9.x (assignment9.size (assignment9.variable_45 assignment9.x)))) (assignment9.variable_44 assignment9.x)
assignment9.expr7 = <{assignment9.:.}> (<{assignment9.=._43}> assignment9.x (assignment9.insert (assignment9.integer 11) assignment9.new)) (<{assignment9.=._43}> assignment9.y (assignment9.variable_45 assignment9.x))
assignment9.expr8 = <{assignment9.:.}> (<{assignment9.:.}> (<{assignment9.=._43}> assignment9.x (assignment9.insert (assignment9.integer 11) assignment9.new)) (<{assignment9.=._43}> assignment9.x (assignment9.insert (assignment9.size (assignment9.variable_45 assignment9.x)) (assignment9.variable_45 assignment9.x)))) (assignment9.variable_45 assignment9.x)
<{assignment9.==._794}> !_vApplicative_0 a_1 b_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 0 (select _vApplicative_0::<{Control.Applicative.Applicative;}> 0 (select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 <{StdInt.==_16}>) a_1) b_2
<{assignment9.==._795}> !a_0 !b_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 <{StdInt.==_16}>) a_0) b_1
assignment9.expr9 = <{assignment9.:.}> (<{assignment9.:.}> (<{assignment9.=._43}> assignment9.x (assignment9.insert (assignment9.integer 0) assignment9.new)) (assignment9.IF (<{assignment9.==._795}> (assignment9.size (assignment9.variable_45 assignment9.x)) (assignment9.integer 0)) assignment9.THEN (<{assignment9.=._43}> assignment9.x (assignment9.insert (assignment9.integer 0) (assignment9.variable_45 assignment9.x))) assignment9.ELSE (<{assignment9.=._43}> assignment9.x (assignment9.delete (assignment9.integer 0) (assignment9.variable_45 assignment9.x))))) (assignment9.variable_45 assignment9.x)
<{assignment9.<._796}> !_vApplicative_0 a_1 b_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 0 (select _vApplicative_0::<{Control.Applicative.Applicative;}> 0 (select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 <{StdInt.<_17}>) a_1) b_2
<{assignment9.<._797}> !a_0 !b_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 <{StdInt.<_17}>) a_0) b_1
assignment9.expr10 = <{assignment9.:.}> (<{assignment9.:.}> (<{assignment9.:.}> (<{assignment9.:.}> (<{assignment9.:.}> (<{assignment9.=._42}> assignment9.z (assignment9.integer 7)) (<{assignment9.=._43}> assignment9.x assignment9.new)) (<{assignment9.=._43}> assignment9.x (assignment9.insert (assignment9.variable_44 assignment9.z) (assignment9.variable_45 assignment9.x)))) (<{assignment9.=._43}> assignment9.y (assignment9.union (assignment9.variable_45 assignment9.x) (assignment9.variable_45 assignment9.x)))) (assignment9.WHILE (<{assignment9.<._797}> (assignment9.size (assignment9.variable_45 assignment9.x)) (assignment9.integer 5)) assignment9.DO (<{assignment9.=._43}> assignment9.x (assignment9.insert (assignment9.size (assignment9.variable_45 assignment9.x)) (assignment9.variable_45 assignment9.x))))) (<{assignment9.=._43}> assignment9.z (assignment9.difference (assignment9.variable_45 assignment9.x) (assignment9.intersect (assignment9.variable_45 assignment9.x) (assignment9.insert (assignment9.variable_44 assignment9.z) assignment9.new))))
assignment9.exprTypeError = <{assignment9.:.}> (<{assignment9.=._42}> assignment9.x (assignment9.integer 0)) (assignment9.variable_45 assignment9.x)
assignment9.Start = assignment9.eval assignment9.expr10
assignment9.anon_41 !f_0 !a_1 s_2 = <{assignment9._c;82;32_813}> (a_1 s_2) f_0
<{assignment9._c;82;32_813}> !_x_0 !f_1 = case _x_0 (_Tuple2 as_1_0 xs_1_1 -> assignment9.unS (f_1 as_1_0) xs_1_1) 
assignment9.bind_49 !_x_0 f_1 = case _x_0 (assignment9.Sem a_1_0 -> assignment9.Sem (assignment9.anon_41 f_1 a_1_0)) 
<{assignment9.-_51}> !x_0 !y_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 <{StdInt.-_7}>) x_0) y_1
<{assignment9.+_53}> !x_0 !y_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 (Data.List.union (<{StdOverloaded.==;}> <{StdInt.==_16}>))) x_0) y_1
<{assignment9.-_54}> !x_0 !y_1 = <{assignment9.<*>_47}> (<{assignment9.<*>_47}> (assignment9.pure_48 (Data.List.difference (<{StdOverloaded.==;}> <{StdInt.==_16}>))) x_0) y_1
<{assignment9.TD;Ident}> _x_0::B = _predefined._Nil
<{assignment9.TD;Element}> _x_0::B = _predefined._Nil
<{assignment9.TD;Set}> _x_0::B = _predefined._Nil
<{assignment9.TD;Variable}> _x_0::B = _predefined._Nil
<{assignment9.TD;Val}> _x_0::B = _predefined._Nil
<{assignment9.TD;State}> _x_0::B = _predefined._Nil
<{assignment9.TD;Sem}> _x_0::B = _predefined._Nil
<{assignment9.TD;THEN}> _x_0::B = _predefined._Nil
<{assignment9.TD;ELSE}> _x_0::B = _predefined._Nil
<{assignment9.TD;DO}> _x_0::B = _predefined._Nil
<{assignment9.TD;Assign;}> _x_0::B = _predefined._Nil
<{assignment9.TD;variable;}> _x_0::B = _predefined._Nil

:: assignment9.Val = assignment9.I a1::I | assignment9.S a1
:: assignment9.Sem = assignment9.Sem a1
:: assignment9.THEN = assignment9.THEN
:: assignment9.ELSE = assignment9.ELSE
:: assignment9.DO = assignment9.DO

|| Converted Records
:: <{assignment9.Assign;}> = {!<{assignment9.=.}>}

:: <{assignment9.variable;}> = {!assignment9.variable}

:: <{assignment9.gEditor_s;}> = {!assignment9.gEditor_s}

:: <{assignment9.gEditor_ss;}> = {!assignment9.gEditor_ss}

:: <{assignment9.gEditor_sss;}> = {!assignment9.gEditor_sss}

:: <{assignment9.gText_s;}> = {!assignment9.gText_s}

:: <{assignment9.gText_ss;}> = {!assignment9.gText_ss}

:: <{assignment9.gText_sss;}> = {!assignment9.gText_sss}

:: <{assignment9.gDefault_s;}> = {assignment9.gDefault_s}

:: <{assignment9.gDefault_ss;}> = {assignment9.gDefault_ss}

:: <{assignment9.gDefault_sss;}> = {assignment9.gDefault_sss}

:: <{assignment9.gEditMeta_s;}> = {!assignment9.gEditMeta_s}

:: <{assignment9.gEditMeta_ss;}> = {!assignment9.gEditMeta_ss}

:: <{assignment9.gEditMeta_sss;}> = {!assignment9.gEditMeta_sss}

:: <{assignment9.JSONEncode_s;}> = {!assignment9.JSONEncode_s}

:: <{assignment9.JSONEncode_ss;}> = {!assignment9.JSONEncode_ss}

:: <{assignment9.JSONEncode_sss;}> = {!assignment9.JSONEncode_sss}

:: <{assignment9.JSONDecode_s;}> = {!assignment9.JSONDecode_s}

:: <{assignment9.JSONDecode_ss;}> = {!assignment9.JSONDecode_ss}

:: <{assignment9.JSONDecode_sss;}> = {!assignment9.JSONDecode_sss}

:: <{assignment9.gEditor_ssss;}> = {!assignment9.gEditor_ssss}

:: <{assignment9.gText_ssss;}> = {!assignment9.gText_ssss}

:: <{assignment9.gDefault_ssss;}> = {assignment9.gDefault_ssss}

:: <{assignment9.gEditMeta_ssss;}> = {!assignment9.gEditMeta_ssss}

:: <{assignment9.JSONEncode_ssss;}> = {!assignment9.JSONEncode_ssss}

:: <{assignment9.JSONDecode_ssss;}> = {!assignment9.JSONDecode_ssss}

:: <{assignment9.gEditor_sssss;}> = {!assignment9.gEditor_sssss}

:: <{assignment9.gText_sssss;}> = {!assignment9.gText_sssss}

:: <{assignment9.gDefault_sssss;}> = {assignment9.gDefault_sssss}

:: <{assignment9.gEditMeta_sssss;}> = {!assignment9.gEditMeta_sssss}

:: <{assignment9.JSONEncode_sssss;}> = {!assignment9.JSONEncode_sssss}

:: <{assignment9.JSONDecode_sssss;}> = {!assignment9.JSONDecode_sssss}

:: <{assignment9.gEditor_ssssss;}> = {!assignment9.gEditor_ssssss}

:: <{assignment9.gText_ssssss;}> = {!assignment9.gText_ssssss}

:: <{assignment9.gDefault_ssssss;}> = {assignment9.gDefault_ssssss}

:: <{assignment9.gEditMeta_ssssss;}> = {!assignment9.gEditMeta_ssssss}

:: <{assignment9.JSONEncode_ssssss;}> = {!assignment9.JSONEncode_ssssss}

:: <{assignment9.JSONDecode_ssssss;}> = {!assignment9.JSONDecode_ssssss}

:: <{assignment9.gEditor_sssssss;}> = {!assignment9.gEditor_sssssss}

:: <{assignment9.gText_sssssss;}> = {!assignment9.gText_sssssss}

:: <{assignment9.gDefault_sssssss;}> = {assignment9.gDefault_sssssss}

:: <{assignment9.gEditMeta_sssssss;}> = {!assignment9.gEditMeta_sssssss}

:: <{assignment9.JSONEncode_sssssss;}> = {!assignment9.JSONEncode_sssssss}

:: <{assignment9.JSONDecode_sssssss;}> = {!assignment9.JSONDecode_sssssss}

:: <{assignment9.gEditor_ssssssss;}> = {!assignment9.gEditor_ssssssss}

:: <{assignment9.gText_ssssssss;}> = {!assignment9.gText_ssssssss}

:: <{assignment9.gDefault_ssssssss;}> = {assignment9.gDefault_ssssssss}

:: <{assignment9.gEditMeta_ssssssss;}> = {!assignment9.gEditMeta_ssssssss}

:: <{assignment9.JSONEncode_ssssssss;}> = {!assignment9.JSONEncode_ssssssss}

:: <{assignment9.JSONDecode_ssssssss;}> = {!assignment9.JSONDecode_ssssssss}

:: <{assignment9.gEditor_sssssssss;}> = {!assignment9.gEditor_sssssssss}

:: <{assignment9.gText_sssssssss;}> = {!assignment9.gText_sssssssss}

:: <{assignment9.gDefault_sssssssss;}> = {assignment9.gDefault_sssssssss}

:: <{assignment9.gEditMeta_sssssssss;}> = {!assignment9.gEditMeta_sssssssss}

:: <{assignment9.JSONEncode_sssssssss;}> = {!assignment9.JSONEncode_sssssssss}

:: <{assignment9.JSONDecode_sssssssss;}> = {!assignment9.JSONDecode_sssssssss}

:: <{assignment9.gVerify_s;}> = {!assignment9.gVerify_s}

:: <{assignment9.gVerify_ss;}> = {!assignment9.gVerify_ss}

:: <{assignment9.gVerify_sss;}> = {!assignment9.gVerify_sss}

:: <{assignment9.gVerify_ssss;}> = {!assignment9.gVerify_ssss}

:: <{assignment9.gVerify_sssss;}> = {!assignment9.gVerify_sssss}

:: <{assignment9.gVerify_ssssss;}> = {!assignment9.gVerify_ssssss}

:: <{assignment9.gVerify_sssssss;}> = {!assignment9.gVerify_sssssss}

:: <{assignment9.gVerify_ssssssss;}> = {!assignment9.gVerify_ssssssss}

:: <{assignment9.gVerify_sssssssss;}> = {!assignment9.gVerify_sssssssss}

:: <{assignment9.gUpdate_s;}> = {!assignment9.gUpdate_s}

:: <{assignment9.gUpdate_ss;}> = {!assignment9.gUpdate_ss}

:: <{assignment9.gUpdate_sss;}> = {!assignment9.gUpdate_sss}

:: <{assignment9.gUpdate_ssss;}> = {!assignment9.gUpdate_ssss}

:: <{assignment9.gUpdate_sssss;}> = {!assignment9.gUpdate_sssss}

:: <{assignment9.gUpdate_ssssss;}> = {!assignment9.gUpdate_ssssss}

:: <{assignment9.gUpdate_sssssss;}> = {!assignment9.gUpdate_sssssss}

:: <{assignment9.gUpdate_ssssssss;}> = {!assignment9.gUpdate_ssssssss}

:: <{assignment9.gUpdate_sssssssss;}> = {!assignment9.gUpdate_sssssssss}

:: <{assignment9.bimap_s;}> = {assignment9.bimap_s}

:: <{assignment9.bimap_ss;}> = {assignment9.bimap_ss}

:: <{assignment9.bimap_sss;}> = {assignment9.bimap_sss}

:: <{assignment9.gEq_s;}> = {!assignment9.gEq_s}

:: <{assignment9.gEq_ss;}> = {!assignment9.gEq_ss}

:: <{assignment9.gEq_sss;}> = {!assignment9.gEq_sss}

:: <{assignment9.gEq_ssss;}> = {!assignment9.gEq_ssss}

:: <{assignment9.gEq_sssss;}> = {!assignment9.gEq_sssss}

:: <{assignment9.gEq_ssssss;}> = {!assignment9.gEq_ssssss}

:: <{assignment9.gEq_sssssss;}> = {!assignment9.gEq_sssssss}

:: <{assignment9.gEq_ssssssss;}> = {!assignment9.gEq_ssssssss}

:: <{assignment9.gEq_sssssssss;}> = {!assignment9.gEq_sssssssss}

:: <{assignment9.gLexOrd_s;}> = {!assignment9.gLexOrd_s}

:: <{assignment9.gLexOrd_ss;}> = {!assignment9.gLexOrd_ss}

:: <{assignment9.gLexOrd_sss;}> = {!assignment9.gLexOrd_sss}

:: <{assignment9.gLexOrd_ssss;}> = {!assignment9.gLexOrd_ssss}

:: <{assignment9.gLexOrd_sssss;}> = {!assignment9.gLexOrd_sssss}

:: <{assignment9.gLexOrd_ssssss;}> = {!assignment9.gLexOrd_ssssss}

:: <{assignment9.gLexOrd_sssssss;}> = {!assignment9.gLexOrd_sssssss}

:: <{assignment9.gLexOrd_ssssssss;}> = {!assignment9.gLexOrd_ssssssss}

:: <{assignment9.gLexOrd_sssssssss;}> = {!assignment9.gLexOrd_sssssssss}

